name: AI-Engine-Service Image Build

env:
  SERVICE_NAME: ai-engine-service
  BUILD_ID: ${{ github.sha }}-${{ github.run_id }}
  HELM_VALUE: ai-engine-service-chart/values.yaml
  HELM_BRANCH: main
on:
  push:
    branches:
      - 'main'
    paths:
      - 'ai-engine-service/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker Authentication
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build Spring Boot Application (clean build)
        working-directory: ./${{ env.SERVICE_NAME }}
        run: ./gradlew clean build

      - name: Build, tag, and push docker image to Google Artifact Registry
        env:
          IMAGE_TAG: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/${{ env.SERVICE_NAME }}:${{ env.BUILD_ID }}
        run: |
          cd ${{ env.SERVICE_NAME }}
          docker build -f ./Dockerfile -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          cd ..

      - name: Checkout Helm Repository
        uses: actions/checkout@v4
        with:
          repository: TEAM-HIGHFIVE/HIGHFIVE-HELM-CHARTS
          path: helm-chart
          ref: ${{ env.HELM_BRANCH }}
          ssh-key: ${{ secrets.HELM_REPO_SSH_KEY }}

      - name: Change Image tag of the Helm Chart
        uses: mikefarah/yq@v4.34.1
        with:
          cmd: yq -i '.image.tag = "${{ env.BUILD_ID }}"' helm-chart/${{ env.HELM_VALUE }}

      - name: Commit and Push Helm Chart Changes
        run: |
          cd helm-chart
          git config --local user.email "githubaction@gmail.com"
          git config --local user.name "githubaction"
          git add ${{ env.HELM_VALUE }}
          git commit -m "Update ${SERVICE_NAME} image tag to ${{ env.BUILD_ID }}" || echo "No changes to commit"

          attempts=0
          max_attempts=3
          
          while [ $attempts -lt $max_attempts ]; do
            if git push origin ${{ env.HELM_BRANCH }}; then
              echo "Push successful!"
              break
            else
              echo "Push failed due to remote ref lock. Attempting rebase with remote branch."
              git pull --rebase origin ${{ env.HELM_BRANCH }}
              attempts=$((attempts+1))
              if [ $attempts -eq $max_attempts ]; then
                echo "Push failed after $max_attempts attempts"
                exit 1
              fi
              echo "Retrying push..."
            fi
          done